from typing import Protocol, Union, Optional, Any, Awaitable
from types import TracebackType
from typing_extensions import Self
from psycopg.rows import Row

class AsyncCursorProtocol(Protocol):
    async def execute(self, query: str, params: Optional[Union[tuple, dict]] = None) -> Any: ...
    async def fetchone(self) -> Union[Row, dict[str, Any]]: ...
    async def fetchall(self) -> Union[list[Row], list[dict[str, Any]]]: ...
    async def fetchmany(self, size: Optional[int] = None) -> Union[list[Row], list[dict[str, Any]]]: ...
    async def close(self) -> None: ...
    async def __aenter__(self) -> Self: ...
    async def __aexit__(
        self,
        exc_type: Optional[type[BaseException]],
        exc_val: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> Optional[bool]: ...

class AsyncPsycopgConnectionProtocol(Protocol):
    def cursor(self, *, binary: bool = False) -> Awaitable[AsyncCursorProtocol]: ...
    async def execute(self, query: str, params: Optional[Union[tuple, dict]] = None) -> Any: ...
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...
    async def close(self) -> None: ...
    async def __aenter__(self) -> Self: ...
    async def __aexit__(
        self,
        exc_type: Optional[type[BaseException]],
        exc_val: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> Optional[bool]: ...